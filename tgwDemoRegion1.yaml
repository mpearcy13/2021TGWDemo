Description:  This template deploy the infrastructure to test AWS Transit Gateway.  3 VPCs will be created.  A VPC for Centralized Egress, a production VPC and a Development VPC.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  # Public IP Address for Bastion EnableDnsHostnames

  BastionHostAllowedIP:
    Description: IP address (CIDR notation) for access to Bastion Host.
    Type: String
    Default: 204.191.112.12/32

  # VPC0 - Egress

  VPC0EgressCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.51.0.0/22

  VPC0SubnetPublicCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.51.0.0/24

  VPC0SubnetPrivateCIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.51.1.0/24

  # VPC1 - Production VPC

  VPC1ProductionCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.51.4.0/22

  VPC1SubnetPrivateCIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.51.4.0/24

  # VPC2 - Development VPC

  VPC2DevelopmentCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.51.8.0/22

  VPC2SubnetPrivateCIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.51.8.0/24

  Key:
    Description: Key to access the instances.
    Type: String
    Default: TestKey

  AMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:

# Private VPC 1 with EC2 Instance

  VPC1Private:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPC1ProductionCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC1 Production

  VPC1SubnetPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1Private
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref VPC1SubnetPrivateCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC1 Production Private (AZ1)

  VPC1SecGrp1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "icmp-ingress-private1-sg"
      GroupDescription: "Security group with ICMP ingress rule"
      VpcId: !Ref VPC1Private
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC1 SG Private

  VPC1ec2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId:  !Ref AMI
      InstanceType: t3.micro
      KeyName: !Ref Key
      SubnetId: !Ref VPC1SubnetPrivate
      SecurityGroupIds:
        - Ref: VPC1SecGrp1
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 32
      Tags:
        -
          Key: Name
          Value: ec2Prod1

  VPC1RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1Private
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC1 RT Private

  VPC1SubnetPrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC1RouteTablePrivate
      SubnetId: !Ref VPC1SubnetPrivate

# Private VPC 2 with EC2 Instance

  VPC2Private:
  #VPCPrivate2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPC2DevelopmentCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC2 Development

  VPC2SubnetPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2Private
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref VPC2SubnetPrivateCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC2 Development Private (AZ1)

  VPC2SecGrp1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ingress-sg"
      GroupDescription: "Security group with ICMP ingress rule"
      VpcId: !Ref VPC2Private
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC2 SG Private

  VPC2ec2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId:  !Ref AMI
      InstanceType: t3.micro
      KeyName: !Ref Key
      SubnetId: !Ref VPC2SubnetPrivate
      SecurityGroupIds:
        - Ref: VPC2SecGrp1
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 32
      Tags:
        -
          Key: Name
          Value: ec2Dev1

  VPC2RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2Private
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC2 RT Private

  VPC2SubnetPrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC2RouteTablePrivate
      SubnetId: !Ref VPC2SubnetPrivate

# Create Egress VPC0, with a bastion host.  Internet Gateway and NAT Gateway setup to support outbound internet for private subnet as well as TGW after configuration.

  VPC0Egress:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPC0EgressCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC0 Egress

  VPC0SubnetPublic:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC0Egress
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref VPC0SubnetPublicCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC0 Egress Public (AZ1)

  VPC0InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPC0GatewayAttachment:
  #VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC0Egress
      InternetGatewayId: !Ref VPC0InternetGateway

  VPC0RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC0Egress
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC0 RT Public

  VPC0RouteInternet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPC0InternetGateway
      RouteTableId: !Ref VPC0RouteTablePublic

  VPC0SubnetPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC0RouteTablePublic
      SubnetId: !Ref VPC0SubnetPublic

  VPC0SecGrp1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "icmp-ingress-Public1-sg"
      GroupDescription: "Security group with ICMP/SSH ingress rule"
      VpcId: !Ref VPC0Egress
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref BastionHostAllowedIP
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC0 SG

  VPC0NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
         Fn::GetAtt:
         - VPC0NatEIP
         - AllocationId
      ConnectivityType: public
      SubnetId: !Ref VPC0SubnetPublic

  VPC0NatEIP:
   Type: AWS::EC2::EIP
   Properties:
      Domain: vpc

  VPC0EC2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref VPC0ec2Instance1
    DependsOn: VPC0SubnetPublicRouteTableAssociation

  VPC0ec2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId:  !Ref AMI
      InstanceType: t3.micro
      KeyName: !Ref Key
      SubnetId: !Ref VPC0SubnetPublic
      SecurityGroupIds:
        - Ref: VPC0SecGrp1
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 32
      Tags:
        -
          Key: Name
          Value: ec2Egress1

  VPC0SubnetPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC0Egress
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref VPC0SubnetPrivateCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC0 Egress Private (AZ1)

  VPC0RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC0Egress
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC0 RT Private

  VPC0RouteInternetPrivate:
  #InternetPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref VPC0NatGateway
      RouteTableId: !Ref VPC0RouteTablePrivate

  VPC0SubnetPrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC0RouteTablePrivate
      SubnetId: !Ref VPC0SubnetPrivate

Outputs:

  VPC0ec2Instance1:
    Description: EC2 Instance ID
    Value: !Ref VPC0ec2Instance1

  VPC1ec2Instance1:
    Description: EC2 Attached to the private subnet for testing connectivity.
    Value: !Ref VPC1ec2Instance1

  VPC2ec2Instance1:
    Description: EC2 Instance ID
    Value: !Ref VPC2ec2Instance1

  VPC0SecGrp1:
    Description: Security group with no ingress rule
    Value: !Ref VPC0SecGrp1

  VPC1SecGrp1:
    Description: Security group with no ingress rule
    Value: !Ref VPC1SecGrp1

  VPC2SecGrp1:
    Description: Security group with no ingress rule
    Value: !Ref VPC2SecGrp1

  VPC0EC2EIP:
    Description: Bastion Host Public IP
    Value: !Ref VPC0EC2EIP

  VPC0NatEIP:
    Description: NAT Gateway Public IP
    Value: !Ref VPC0NatEIP
