Description:  This template deploy the infrastructure to test AWS Transit Gateway.  3 VPCs will be created.  A VPC for Centralized Egress, a production VPC and a Development VPC.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  # Public IP Address for Bastion EnableDnsHostnames

  BastionHostAllowedIP:
    Description: IP address (CIDR notation) for access to Bastion Host.
    Type: String
    Default: 204.191.112.12/32

  # VPC0 - Egress

  VPC0EgressCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.51.0.0/22

  VPC0SubnetPublicCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.51.0.0/24

  VPC0SubnetPrivateCIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.51.1.0/24

  # VPC1 - Production VPC

  VPC1ProductionCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.51.4.0/22

  VPC1SubnetPrivateCIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.51.4.0/24

  # VPC2 - Development VPC

  VPC2DevelopmentCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.51.8.0/22

  VPC2SubnetPrivateCIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.51.8.0/24

  Key:
    Description: Key to access the instances.
    Type: String
    Default: TestKey

  #AMI:
  #  Description: AMI to for EC2 Images.
  #  Type: String
  #  Default: ami-02f84cf47c23f1769

  # Get the latest AMI for the deployment
  # https://aws.amazon.com/blogs/compute/query-for-the-latest-amazon-linux-ami-ids-using-aws-systems-manager-parameter-store/

  AMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:

# Private VPC 1 with EC2 Instance

  VPCPrivate1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPC1ProductionCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC1 Production

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCPrivate1
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref VPC1SubnetPrivateCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} SnPrProd1 (AZ1)

  ICMPIngressSecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "icmp-ingress-private1-sg"
      GroupDescription: "Security group with ICMP ingress rule"
      VpcId: !Ref VPCPrivate1
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} SG Prod Private 1

  ec2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId:  !Ref AMI
      InstanceType: t3.medium
      KeyName: !Ref Key
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - Ref: ICMPIngressSecurityGroup1
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 32
      Tags:
        -
          Key: Name
          Value: ec2Prod1

# Private VPC 2 with EC2 Instance

  VPCPrivate2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPC2DevelopmentCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC2 Development

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCPrivate2
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref VPC2SubnetPrivateCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} SnPrDev1 (AZ1)

  ICMPIngressSecurityGroup2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ingress-sg"
      GroupDescription: "Security group with ICMP ingress rule"
      VpcId: !Ref VPCPrivate2
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} SG Dev Private 2

  ec2Instance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId:  !Ref AMI
      InstanceType: t3.medium
      KeyName: !Ref Key
      SubnetId: !Ref PrivateSubnet2
      SecurityGroupIds:
        - Ref: ICMPIngressSecurityGroup2
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 32
      Tags:
        -
          Key: Name
          Value: ec2Dev1

# Public VPC 0 with EC2 Instance

  VPCPublic0:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPC0EgressCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC0 Egress

  PublicSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCPublic0
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref VPC0SubnetPublicCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} SnPbEg1 (AZ1)

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCPublic0
      InternetGatewayId: !Ref InternetGateway

  RouteTablePublic0:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCPublic0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} RT SnPbEg1

  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublic0

  SubnetPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic0
      SubnetId: !Ref PublicSubnet0

  ICMPIngressPublicSecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "icmp-ingress-Public1-sg"
      GroupDescription: "Security group with ICMP/SSH ingress rule"
      VpcId: !Ref VPCPublic0
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 204.191.112.12/32
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} SG Egress Public 1

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
         Fn::GetAtt:
         - NatEIP
         - AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet0

  NatEIP:
   Type: AWS::EC2::EIP
   Properties:
      Domain: vpc

  ec2InstancePublic0Eip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref ec2InstancePublic0
    DependsOn: SubnetPublicRouteTableAssociation

  ec2InstancePublic0:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId:  !Ref AMI
      InstanceType: t3.medium
      KeyName: !Ref Key
      SubnetId: !Ref PublicSubnet0
      SecurityGroupIds:
        - Ref: ICMPIngressPublicSecurityGroup1
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 32
      Tags:
        -
          Key: Name
          Value: ec2Egress1

  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCPublic0
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref VPC0SubnetPrivateCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} SnPrEg1 (AZ1)

  RouteTablePrivate0:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCPublic0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} RT SnPrEg1

  InternetPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref RouteTablePrivate0

  SubnetPrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate0
      SubnetId: !Ref PrivateSubnet0



Outputs:
  VPCPrivate1:
    Description: A reference to the created VPC
    Value: !Ref VPCPrivate1

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  ec2Instance1:
    Description: EC2 Instance ID
    Value: !Ref ec2Instance1

  ICMPIngressSecurityGroup1:
    Description: Security group with no ingress rule
    Value: !Ref ICMPIngressSecurityGroup1

  VPCPrivate2:
    Description: A reference to the created VPC
    Value: !Ref VPCPrivate2

  PrivateSubnet2:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet2

  ec2Instance2:
    Description: EC2 Instance ID
    Value: !Ref ec2Instance2

  ICMPIngressSecurityGroup2:
    Description: Security group with no ingress rule
    Value: !Ref ICMPIngressSecurityGroup2

  VPCPublic0:
    Description: A reference to the created VPC
    Value: !Ref VPCPublic0

  PublicSubnet0:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet0

  ec2InstancePublic0:
    Description: EC2 Instance ID
    Value: !Ref ec2InstancePublic0

  ICMPIngressPublicSecurityGroup1:
    Description: Security group with no ingress rule
    Value: !Ref ICMPIngressPublicSecurityGroup1
